//: [Previous](@previous)

import Foundation
import Combine

public func example(of description: String, action: () -> Void) {
    print("\n------ Example of:", description, "------\n")
    action()
}

// Subscriptions property.
private var subscriptions = Set<AnyCancellable>()


/*
 1 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∏–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –æ—Ç Subject, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏.
 2 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .collect() —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π .byTime –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥.
 3 –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Unicode.Scalar, –∑–∞—Ç–µ–º –≤ Character, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é .map().
 4 –°–æ–∑–¥–∞–π—Ç–µ –≤—Ç–æ—Ä–æ–π –∏–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –æ—Ç Subject, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —Å–∏–º–≤–æ–ª–æ–º. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 0,9 —Å–µ–∫—É–Ω–¥—ã, —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
 5 –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –∏–∑–¥–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–¥–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–æ–∫ –∏ —ç–º–æ–¥–∑–∏. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 6 –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/

example(of: "Homework 3, option 1") {
    let queue = DispatchQueue(label: "Collect1")
    let subject = PassthroughSubject<String, Never>()
    
    let firstPublisher = subject
    firstPublisher
//        .print()
        .collect(.byTime(queue, .seconds(0.5)))
        .map{ (strings) -> String in
            var tmpString = String()
            for string in strings {
                tmpString += string
            }
            return tmpString
        }
        .compactMap{ Unicode.Scalar($0) }
        .compactMap{ Character($0) }
        .map{ String($0).description }
    
    let secondPublisher = subject
    secondPublisher
//        .print()
        .measureInterval(using: DispatchQueue.main)
        .map{ $0 > 0.9 ? "üòé" : ""}
//        .merge(with: firstPublisher)
        .zip(firstPublisher)
        .sink(receiveCompletion: { print($0) }, receiveValue: { print($0) })
        .store(in: &subscriptions)
    
    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
        subject.send("A")
        subject.send("B")
        subject.send("C")
        subject.send("D")
    }
    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
        subject.send("E")
    }
    DispatchQueue.main.asyncAfter(deadline: .now() + 1.2) {
        subject.send("F")
    }
    DispatchQueue.main.asyncAfter(deadline: .now() + 2.1) {
        subject.send("G")
    }
    DispatchQueue.main.asyncAfter(deadline: .now() + 3.2) {
        subject.send("H")
        subject.send(completion: .finished)
    }
}

//: [Next](@next)
